// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Error should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Error
    error="Network error!"
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <strong>
          Upps, error!
</strong>,
        " ",
        "Network error!",
        <button
          aria-label="Close"
          className="close"
          data-dismiss="alert"
          onClick={[Function]}
          type="button"
>
          <span
                    aria-hidden="true"
          >
                    ×
          </span>
</button>,
      ],
      "className": "my-3 alert alert-warning alert-dismissible",
      "role": "alert",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Upps, error!",
        },
        "ref": null,
        "rendered": "Upps, error!",
        "type": "strong",
      },
      " ",
      "Network error!",
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "aria-label": "Close",
          "children": <span
            aria-hidden="true"
>
            ×
</span>,
          "className": "close",
          "data-dismiss": "alert",
          "onClick": [Function],
          "type": "button",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "aria-hidden": "true",
            "children": "×",
          },
          "ref": null,
          "rendered": "×",
          "type": "span",
        },
        "type": "button",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <strong>
            Upps, error!
</strong>,
          " ",
          "Network error!",
          <button
            aria-label="Close"
            className="close"
            data-dismiss="alert"
            onClick={[Function]}
            type="button"
>
            <span
                        aria-hidden="true"
            >
                        ×
            </span>
</button>,
        ],
        "className": "my-3 alert alert-warning alert-dismissible",
        "role": "alert",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Upps, error!",
          },
          "ref": null,
          "rendered": "Upps, error!",
          "type": "strong",
        },
        " ",
        "Network error!",
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "aria-label": "Close",
            "children": <span
              aria-hidden="true"
>
              ×
</span>,
            "className": "close",
            "data-dismiss": "alert",
            "onClick": [Function],
            "type": "button",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "aria-hidden": "true",
              "children": "×",
            },
            "ref": null,
            "rendered": "×",
            "type": "span",
          },
          "type": "button",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getSnapshotBeforeUpdate": true,
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
